package br.unisc.tcc_projeto.controllers;

import br.unisc.tcc_projeto.DTO.RegisterRequest;
import br.unisc.tcc_projeto.entidades.Usuario;
import br.unisc.tcc_projeto.repositories.UsuarioRepository;
import br.unisc.tcc_projeto.services.AgendamentoService;
import br.unisc.tcc_projeto.services.AuthenticationService;
import br.unisc.tcc_projeto.services.UsuarioService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/usuarios")
public class UsuarioController {

    @Autowired
    private UsuarioService usuarioService;

    @Autowired
    private AuthenticationService authenticationService;

    @Autowired
    private UsuarioRepository usuarioRepository;

    @Autowired
    private AgendamentoService agendamentoService;

    @GetMapping("/listar/{tipo}")
    public ResponseEntity<List<Usuario>> listarUsuariosPorTipo(@PathVariable("tipo") String tipoDeUsuario) {
        List<Usuario> usuarios = usuarioService.listarUsuarioPorTipo(tipoDeUsuario);
        return ResponseEntity.ok(usuarios);
    }

    @GetMapping("/listar/todos")
    public ResponseEntity<List<Usuario>> listarTodos() {
        List<Usuario> usuarios = usuarioService.listarTodos();
        return ResponseEntity.ok(usuarios);
    }

    @GetMapping("/agendamento/funcionarios")
    public ResponseEntity<List<Map<String, Object>>> listarFuncionariosParaAgendamento() {
        List<Usuario> funcionarios = usuarioRepository.findByTipoDeUsuario("FUNCIONARIO");

        List<Map<String, Object>> resultado = funcionarios.stream()
                .map(func -> {
                    Map<String, Object> funcionarioMap = new HashMap<>();
                    funcionarioMap.put("id", func.getId());
                    funcionarioMap.put("nome", func.getNome());
                    return funcionarioMap;
                })
                .collect(Collectors.toList());

        return ResponseEntity.ok(resultado);
    }
//    @CrossOrigin(origins = "https://8bc5-186-251-165-84.ngrok-free.app/")
    @CrossOrigin(origins = "http://localhost:3000")
    @PostMapping("/cadastrar-cliente")
    public ResponseEntity<?> cadastrarCliente(@RequestBody RegisterRequest request) {
        return cadastrarUsuario(request, "CLIENTE");
    }

    @PostMapping("/cadastrar-funcionario")
    public ResponseEntity<?> cadastrarFuncionario(@RequestBody RegisterRequest request) {
        return cadastrarUsuario(request, "FUNCIONARIO");
    }

    @PostMapping("/cadastrar-administrador")
    public ResponseEntity<?> cadastrarAdministrador(@RequestBody RegisterRequest request) {
        return cadastrarUsuario(request, "ADMINISTRADOR");
    }

    private ResponseEntity<?> cadastrarUsuario(RegisterRequest request, String tipo) {
        try {
            System.out.println("Recebendo requisição: " + request);
            request.setTipoDeUsuario(tipo);
            String response = authenticationService.register(request);
            return ResponseEntity.status(HttpStatus.CREATED).body(response);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }

    }

    @PutMapping("/editar/{id}")
    public ResponseEntity<?> editarUsuario(@PathVariable Long id, @RequestBody Usuario usuarioAtualizado) {
        Optional<Usuario> usuarioOptional = usuarioService.buscarPorId(id);
        if (usuarioOptional.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Usuário não encontrado.");
        }

        Usuario usuario = usuarioOptional.get();
        usuario.setNome(usuarioAtualizado.getNome());
        usuario.setEmail(usuarioAtualizado.getEmail());
        usuario.setTelefone(usuarioAtualizado.getTelefone());
        usuario.setTipoDeUsuario(usuarioAtualizado.getTipoDeUsuario());

        usuarioService.salvarUsuario(usuario);

        return ResponseEntity.ok("Usuário atualizado com sucesso!");
    }

    @DeleteMapping("/excluir/{id}")
    public ResponseEntity<?> excluirUsuario(@PathVariable Long id) {
        Optional<Usuario> usuarioOptional = usuarioService.buscarPorId(id);

        if (usuarioOptional.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Usuário não encontrado.");
        }

        try {
            // Exemplo: desassociar agendamentos antes de excluir o usuário
            agendamentoService.desassociarAgendamentosPorUsuarioId(id);

            usuarioService.excluirUsuario(id); // Exclui o usuário diretamente
            return ResponseEntity.ok("Usuário excluído com sucesso!");
        } catch (DataIntegrityViolationException e) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body("Não é possível excluir o usuário devido a registros relacionados.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Erro ao excluir usuário: " + e.getMessage());
        }
    }

    @GetMapping("/{id}")
    public ResponseEntity<Usuario> buscarUsuarioPorId(@PathVariable Long id) {
        Usuario usuario = usuarioService.buscarUsuarioPorId(id);
        return usuario != null ? ResponseEntity.ok(usuario) : ResponseEntity.notFound().build();
    }


}
