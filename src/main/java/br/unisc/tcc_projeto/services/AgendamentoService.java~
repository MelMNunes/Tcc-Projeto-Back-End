package br.unisc.tcc_projeto.services;

import br.unisc.tcc_projeto.DTO.AgendamentoDTO;
import br.unisc.tcc_projeto.entidades.Agendamento;
import br.unisc.tcc_projeto.entidades.Servico;
import br.unisc.tcc_projeto.entidades.Usuario;
import br.unisc.tcc_projeto.repositories.AgendamentoRepository;
import br.unisc.tcc_projeto.repositories.ServicoRepository;
import br.unisc.tcc_projeto.repositories.UsuarioRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional; // Importante para operações de escrita

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Locale;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class AgendamentoService {

    @Autowired
    private AgendamentoRepository agendamentoRepository;

    @Autowired
    private UsuarioRepository usuarioRepository;

    @Autowired
    private ServicoRepository servicoRepository;

    // Se ServicoService for usado para buscar detalhes do serviço como duração,
    // certifique-se de que ele existe e está injetado.
    // Se buscarPorId já existe no ServicoRepository, pode não ser necessário.
    @Autowired
    private ServicoService servicoService;


    // Método para criar um novo agendamento
    // Adicionado Transactional para garantir atomicidade
    @Transactional
    public Agendamento salvarAgendamento(Agendamento agendamento) {
        // Validação de conflito antes de salvar
        // A lógica de existeConflito pode precisar do ID do agendamento se for uma edição,
        // para não conflitar consigo mesmo.
        if (agendamento.getId() == null && existeConflito(agendamento.getDataHora(), agendamento.getFuncionarioId(), agendamento.getServicoId(), null)) {
            throw new RuntimeException("Conflito de horário: já existe um agendamento para este funcionário neste horário.");
        } else if (agendamento.getId() != null && existeConflito(agendamento.getDataHora(), agendamento.getFuncionarioId(), agendamento.getServicoId(), agendamento.getId())) {
            throw new RuntimeException("Conflito de horário: já existe outro agendamento para este funcionário neste horário.");
        }
        return agendamentoRepository.save(agendamento);
    }

    // Método para buscar agendamentos por cliente, retornando DTO com IDs
    public List<AgendamentoDTO> buscarAgendamentosPorCliente(Long clienteId) {
        Usuario cliente = usuarioRepository.findById(clienteId)
                .orElseThrow(() -> new RuntimeException("Cliente não encontrado com ID: " + clienteId));

        if (!"CLIENTE".equalsIgnoreCase(cliente.getTipoDeUsuario())) { // Usar equalsIgnoreCase para robustez
            throw new RuntimeException("Usuário com ID " + clienteId + " não é um cliente válido.");
        }

        List<Agendamento> agendamentos = agendamentoRepository.findByClienteId(clienteId);
        return agendamentos.stream().map(agendamento -> {
            Usuario funcionario = usuarioRepository.findById(agendamento.getFuncionarioId())
                    .orElseThrow(() -> new RuntimeException("Funcionário não encontrado com ID: " + agendamento.getFuncionarioId() + " para o agendamento ID: " + agendamento.getId()));
            Servico servico = servicoRepository.findById(agendamento.getServicoId())
                    .orElseThrow(() -> new RuntimeException("Serviço não encontrado com ID: " + agendamento.getServicoId() + " para o agendamento ID: " + agendamento.getId()));

            return new AgendamentoDTO(
                    agendamento.getId(),
                    agendamento.getDataHora(),
                    cliente.getNome(),
                    agendamento.getClienteId(), // ID do cliente da entidade Agendamento
                    funcionario.getNome(),
                    agendamento.getFuncionarioId(), // ID do funcionário da entidade Agendamento
                    servico.getNome(),
                    agendamento.getServicoId(), // ID do serviço da entidade Agendamento
                    agendamento.getDescricao(),
                    agendamento.getStatus()
            );
        }).collect(Collectors.toList());
    }

    // Método para buscar agendamentos por funcionário, retornando DTO com IDs
    public List<AgendamentoDTO> buscarAgendamentosPorFuncionario(Long funcionarioId) {
        Usuario funcionario = usuarioRepository.findById(funcionarioId)
                .orElseThrow(() -> new RuntimeException("Funcionário não encontrado com ID: " + funcionarioId));

        if (!"FUNCIONARIO".equalsIgnoreCase(funcionario.getTipoDeUsuario())) {
            throw new RuntimeException("Usuário com ID " + funcionarioId + " não é um funcionário válido.");
        }

        List<Agendamento> agendamentos = agendamentoRepository.findByFuncionarioId(funcionarioId);
        return agendamentos.stream().map(agendamento -> {
            Usuario cliente = usuarioRepository.findById(agendamento.getClienteId())
                    .orElseThrow(() -> new RuntimeException("Cliente não encontrado com ID: " + agendamento.getClienteId() + " para o agendamento ID: " + agendamento.getId()));
            Servico servico = servicoRepository.findById(agendamento.getServicoId())
                    .orElseThrow(() -> new RuntimeException("Serviço não encontrado com ID: " + agendamento.getServicoId() + " para o agendamento ID: " + agendamento.getId()));

            return new AgendamentoDTO(
                    agendamento.getId(),
                    agendamento.getDataHora(),
                    cliente.getNome(),
                    agendamento.getClienteId(), // ID do cliente
                    funcionario.getNome(),
                    agendamento.getFuncionarioId(), // ID do funcionário
                    servico.getNome(),
                    agendamento.getServicoId(), // ID do serviço
                    agendamento.getDescricao(),
                    agendamento.getStatus()
            );
        }).collect(Collectors.toList());
    }


    // Método para buscar um agendamento por ID (retorna a entidade)
    public Optional<Agendamento> buscarAgendamentoPorId(Long id) {
        return agendamentoRepository.findById(id);
    }

    // Método para atualizar um agendamento
    // Adicionado Transactional
    @Transactional
    public Agendamento atualizarAgendamento(Long id, Agendamento agendamentoAtualizado) {
        Agendamento agendamentoExistente = agendamentoRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Agendamento não encontrado com ID: " + id));

        // Validação de conflito, ignorando o próprio agendamento que está sendo editado
        if (existeConflito(agendamentoAtualizado.getDataHora(), agendamentoAtualizado.getFuncionarioId(), agendamentoAtualizado.getServicoId(), id)) {
            throw new RuntimeException("Conflito de horário: já existe outro agendamento para este funcionário neste horário.");
        }

        // Atualiza os campos do agendamento existente com os dados recebidos
        agendamentoExistente.setClienteId(agendamentoAtualizado.getClienteId());
        agendamentoExistente.setFuncionarioId(agendamentoAtualizado.getFuncionarioId());
        agendamentoExistente.setServicoId(agendamentoAtualizado.getServicoId());
        agendamentoExistente.setDataHora(agendamentoAtualizado.getDataHora());
        agendamentoExistente.setDescricao(agendamentoAtualizado.getDescricao());
        agendamentoExistente.setStatus(agendamentoAtualizado.getStatus());
        // Adicione outros campos que podem ser atualizados

        return agendamentoRepository.save(agendamentoExistente);
    }

    // Método para cancelar um agendamento (exclusão física)
    // Adicionado Transactional
    @Transactional
    public void cancelarAgendamento(Long id) {
        if (!agendamentoRepository.existsById(id)) {
            throw new RuntimeException("Agendamento não encontrado com ID: " + id + " para cancelamento.");
        }
        agendamentoRepository.deleteById(id);
    }

    // Método para desassociar/excluir agendamentos de um usuário pelo ID do usuário
    // Adicionado Transactional
    @Transactional
    public void desassociarAgendamentosPorUsuarioId(Long usuarioId) {
        List<Agendamento> agendamentosComoCliente = agendamentoRepository.findByClienteId(usuarioId);
        if (!agendamentosComoCliente.isEmpty()) {
            agendamentoRepository.deleteAll(agendamentosComoCliente);
        }

        List<Agendamento> agendamentosComoFuncionario = agendamentoRepository.findByFuncionarioId(usuarioId);
        if (!agendamentosComoFuncionario.isEmpty()) {
            agendamentoRepository.deleteAll(agendamentosComoFuncionario);
        }
    }

    // Busca histórico (entidades)
    public List<Agendamento> getHistoricoByFuncionarioId(Long funcionarioId) {
        return agendamentoRepository.findHistoricoByFuncionarioId(funcionarioId);
    }

    // Busca todos os agendamentos (entidades)
    public List<Agendamento> buscarTodosAgendamentos() {
        return agendamentoRepository.findAll();
    }

    // Lógica de conflito ajustada para aceitar um ID de agendamento a ser ignorado (para edições)
    public boolean existeConflito(LocalDateTime inicioNovo, Long funcionarioId, Long servicoId, Long agendamentoIdEditado) {
        Servico servicoNovo = servicoRepository.findById(servicoId)
                .orElseThrow(() -> new RuntimeException("Serviço não encontrado para verificação de conflito com ID: " + servicoId));
        int duracao = servicoNovo.getDuracao_minutos(); // Supondo que Servico tenha getDuracao_minutos()
        LocalDateTime fimNovo = inicioNovo.plusMinutes(duracao);

        List<Agendamento> agendamentosDoFuncionarioNoDia = agendamentoRepository.findByFuncionarioIdAndData(funcionarioId, inicioNovo.toLocalDate());

        for (Agendamento agExistente : agendamentosDoFuncionarioNoDia) {
            // Se estamos editando um agendamento, não o compare consigo mesmo
            if (agendamentoIdEditado != null && agExistente.getId().equals(agendamentoIdEditado)) {
                continue;
            }

            Servico servicoExistente = servicoRepository.findById(agExistente.getServicoId())
                    .orElseThrow(() -> new RuntimeException("Serviço existente não encontrado com ID: " + agExistente.getServicoId()));
            LocalDateTime inicioExistente = agExistente.getDataHora();
            LocalDateTime fimExistente = inicioExistente.plusMinutes(servicoExistente.getDuracao_minutos());

            // Verifica sobreposição
            // (StartA < EndB) and (EndA > StartB)
            if (inicioNovo.isBefore(fimExistente) && fimNovo.isAfter(inicioExistente)) {
                return true; // Conflito encontrado
            }
        }
        return false; // Nenhum conflito
    }


    // Retorna apenas os horários (strings) ocupados para um funcionário em uma data
    public List<String> buscarHorariosOcupados(String data, Long funcionarioId) {
        LocalDate dataFormatada = LocalDate.parse(data); // Assume formato YYYY-MM-DD
        List<Agendamento> agendamentos = agendamentoRepository.findByFuncionarioIdAndData(funcionarioId, dataFormatada);
        return agendamentos.stream()
                .map(agendamento -> agendamento.getDataHora().toLocalTime().toString()) // Formato HH:MM ou HH:MM:SS
                .collect(Collectors.toList());
    }

    // Busca agendamentos por funcionário e status, retornando DTO com IDs
    public List<AgendamentoDTO> buscarAgendamentosPorFuncionarioEStatus(Long funcionarioId, String status) {
        // Valida o funcionário primeiro
        Usuario funcionario = usuarioRepository.findById(funcionarioId)
                .orElseThrow(() -> new RuntimeException("Funcionário não encontrado com ID: " + funcionarioId));
        if (!"FUNCIONARIO".equalsIgnoreCase(funcionario.getTipoDeUsuario())) {
            throw new RuntimeException("Usuário com ID " + funcionarioId + " não é um funcionário válido.");
        }

        List<Agendamento> agendamentos = agendamentoRepository.findByFuncionarioIdAndStatus(funcionarioId, status.toUpperCase(Locale.ROOT));

        return agendamentos.stream().map(agendamento -> {
            Usuario cliente = usuarioRepository.findById(agendamento.getClienteId())
                    .orElseThrow(() -> new RuntimeException("Cliente não encontrado com ID: " + agendamento.getClienteId() + " para o agendamento ID: " + agendamento.getId()));
            Servico servico = servicoRepository.findById(agendamento.getServicoId())
                    .orElseThrow(() -> new RuntimeException("Serviço não encontrado com ID: " + agendamento.getServicoId() + " para o agendamento ID: " + agendamento.getId()));

            return new AgendamentoDTO(
                    agendamento.getId(),
                    agendamento.getDataHora(),
                    cliente.getNome(),
                    agendamento.getClienteId(),
                    funcionario.getNome(), // Nome do funcionário já buscado
                    agendamento.getFuncionarioId(),
                    servico.getNome(),
                    agendamento.getServicoId(),
                    agendamento.getDescricao(),
                    agendamento.getStatus(),
                    
            );
        }).collect(Collectors.toList());
    }

    // Busca agendamentos por funcionário e data específica, retornando DTO com IDs
    public List<AgendamentoDTO> buscarPorFuncionarioEData(Long funcionarioId, LocalDate data) {
        // Valida o funcionário
        Usuario funcionario = usuarioRepository.findById(funcionarioId)
                .orElseThrow(() -> new RuntimeException("Funcionário não encontrado com ID: " + funcionarioId));
        if (!"FUNCIONARIO".equalsIgnoreCase(funcionario.getTipoDeUsuario())) {
            throw new RuntimeException("Usuário com ID " + funcionarioId + " não é um funcionário válido.");
        }

        LocalDateTime inicioDoDia = data.atStartOfDay();
        LocalDateTime fimDoDia = data.atTime(23, 59, 59, 999999999); // Inclui até o último nanossegundo do dia

        List<Agendamento> agendamentos = agendamentoRepository.findByFuncionarioIdAndDataHoraBetween(
                funcionarioId,
                inicioDoDia,
                fimDoDia
        );

        return agendamentos.stream().map(agendamento -> {
            Usuario cliente = usuarioRepository.findById(agendamento.getClienteId())
                    .orElseThrow(() -> new RuntimeException("Cliente não encontrado com ID: " + agendamento.getClienteId() + " para o agendamento ID: " + agendamento.getId()));
            Servico servico = servicoRepository.findById(agendamento.getServicoId())
                    .orElseThrow(() -> new RuntimeException("Serviço não encontrado com ID: " + agendamento.getServicoId() + " para o agendamento ID: " + agendamento.getId()));

            return new AgendamentoDTO(
                    agendamento.getId(),
                    agendamento.getDataHora(),
                    cliente.getNome(),
                    agendamento.getClienteId(),
                    funcionario.getNome(), // Nome do funcionário já buscado
                    agendamento.getFuncionarioId(),
                    servico.getNome(),
                    agendamento.getServicoId(),
                    agendamento.getDescricao(),
                    agendamento.getStatus()
            );
        }).collect(Collectors.toList());
    }

    // MÉTODO PRINCIPAL A SER CORRIGIDO PARA A TELA DE RECEPÇÃO
    // Lista agendamentos por status (ex: PENDENTE) e retorna DTOs com IDs e nomes.
    public List<AgendamentoDTO> listarAgendamentosPorStatusComNomes(String status) {
        List<Agendamento> agendamentos = agendamentoRepository.findByStatusOrderByDataHoraAsc(status.toUpperCase(Locale.ROOT));

        return agendamentos.stream().map(agendamento -> {
            // Os IDs já estão no objeto 'agendamento' da entidade.
            // Buscamos os nomes para popular o DTO.
            Usuario cliente = usuarioRepository.findById(agendamento.getClienteId())
                    .orElse(null); // Permite cliente nulo, mas idealmente deveria existir

            Usuario funcionario = usuarioRepository.findById(agendamento.getFuncionarioId())
                    .orElse(null); // Permite funcionário nulo

            Servico servico = servicoRepository.findById(agendamento.getServicoId())
                    .orElse(null); // Permite serviço nulo

            // Usa o construtor do AgendamentoDTO que inclui os IDs
            return new AgendamentoDTO(
                    agendamento.getId(),
                    agendamento.getDataHora(),
                    cliente != null ? cliente.getNome() : "Cliente não encontrado/definido",
                    agendamento.getClienteId(), // ID DO CLIENTE
                    funcionario != null ? funcionario.getNome() : "Funcionário não encontrado/definido",
                    agendamento.getFuncionarioId(), // ID DO FUNCIONÁRIO
                    servico != null ? servico.getNome() : "Serviço não encontrado/definido",
                    agendamento.getServicoId(), // ID DO SERVIÇO
                    agendamento.getDescricao(),
                    agendamento.getStatus()
            );
        }).collect(Collectors.toList());
    }
}
